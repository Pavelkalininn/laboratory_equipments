name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r ./equipment_project/requirements.txt
      - name: Test with flake8 and unittests
        run: |
          python -m flake8
#          cd equipment_project/
#          python manage.py migrate
#          python manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: equipment_project/
          tags: ${{ secrets.DOCKER_USERNAME }}/equipment_project:v0.5

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build_and_push_to_docker_hub
#    if: github.ref == 'refs/heads/main'
#    steps:
#      - name: executing remote ssh commands to deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          passphrase: ${{ secrets.PASSPHRASE }}
#          script: |
#            sudo docker-compose stop
#            sudo docker-compose rm web
#            touch .env
#            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
#            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
#            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#            echo SECRET_KEY='${{ secrets.SECRET_KEY }}' >> .env
#            echo DOCKER_USERNAME='${{ secrets.DOCKER_USERNAME }}' >> .env
#            echo EMAIL_USE_TLS='${{ secrets.EMAIL_USE_TLS }}' >> .env
#            echo EMAIL_HOST='${{ secrets.EMAIL_HOST }}' >> .env
#            echo EMAIL_PORT='${{ secrets.EMAIL_PORT }}' >> .env
#            echo EMAIL_HOST_USER='${{ secrets.EMAIL_HOST_USER }}' >> .env
#            echo EMAIL_HOST_PASSWORD='${{ secrets.EMAIL_HOST_PASSWORD }}' >> .env
#            echo DEFAULT_FROM_EMAIL='${{ secrets.DEFAULT_FROM_EMAIL }}' >> .env
#            sudo docker-compose up -d
  send_message:
    runs-on: ubuntu-latest
#    needs: deploy
    needs: build_and_push_to_docker_hub
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
